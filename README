#  README

## Visão Geral

Este projeto combina **ASP.NET Core** e **React** para criar uma aplicação full-stack baseada em Clean Architecture, CQRS e o padrão Mediator. O objetivo é fornecer um código bem estruturado, modular e fácil de manter, aprimorando o conhecimento em ambas as tecnologias.

## Tecnologias Utilizadas

- **ASP.NET Core WebAPI**: Para o backend e gerenciamento de lógica de negócios.
- **React com TypeScript**: Para criar uma interface de usuário moderna e responsiva.
- **CQRS + Mediator Pattern**: Para separar as responsabilidades entre comandos e consultas, melhorando a escalabilidade.
- **ASP.NET Core Identity**: Para autenticação e gerenciamento de usuários.
- **React Router**: Para navegação entre páginas no frontend.
- **AutoMapper**: Para simplificação do mapeamento de objetos no backend.
- **Semantic UI**: Para estilização e criação de uma UI atraente.
- **React Hook Form + Zod**: Para criar formulários reutilizáveis com validação eficiente.
- **SignalR**: Para comunicação em tempo real, como chat ao vivo.
- **Paging, Sorting e Filtering**: Para gerenciamento eficiente de grandes volumes de dados.
- **Upload de Fotos e Perfis de Usuário**: Para personalização de contas dos usuários.

## Funcionalidades do Projeto

- **Autenticação e Autorização**: Login e registro de usuários.
- **Interface Moderna**: Utilização do Semantic UI para um design visual aprimorado.
- **Gerenciamento de Dados**: Filtros, paginação e ordenação eficientes.
- **Comunicação em Tempo Real**: Implementação de chat via SignalR.
- **Formulários Dinâmicos**: Uso de React Hook Form e Zod para formulários reutilizáveis e validados.
- **Upload de Imagens**: Integração para envio de fotos e criação de perfis personalizados.

## Configuração do Ambiente

1. **Configurar o Backend (ASP.NET Core)**:

   - Instalar o .NET SDK
   - Criar o projeto usando DotNet CLI
   - Configurar a autenticação e banco de dados

2. **Configurar o Frontend (React + TypeScript)**:

   - Criar o projeto usando `create-react-app`
   - Instalar dependências necessárias (`react-router-dom`, `react-hook-form`, `zod`, etc.)

3. **Executar a Aplicação**:

   - Rodar o backend: `dotnet run`
   - Rodar o frontend: `npm start`

## Conclusão

Este projeto oferece uma experiência prática na construção de uma aplicação moderna utilizando **ASP.NET Core e React**, cobrindo desde a arquitetura até a interface do usuário. Com essa base, é possível desenvolver aplicações escaláveis, organizadas e fáceis de manter.

gerar
